@page "/Abono/{id:long}/{de:float}"
@page "/Abono/{Ids:int}"
@layout Receptor_pagador;

@using Model
@using Interfaces

@inject IAbono Ab
@inject IPedidoPago ppd
@inject IJSRuntime js
@inject NavigationManager NavigationManager
<link href="/css/add.css" rel="stylesheet" />
<div class="container">
    <br>



    <EditForm Model="@abon">
        <br>
        <h1 class="titulo">Agregar pago</h1>
        <br>

        <div class="input-group mb-3">
            <input type="text" class="form-control" id="deuda" aria-describedby="inputGroup-sizing-default" placeholder="Deuda" value="@de" readonly>
        </div>
        <div class="input-group mb-3">
            <input type="date" class="form-control" id="fecha" @bind="abon.Fecha_Pago" placeholder="Fecha de Pago" required>
        </div>
        <div class="input-group mb-3">
            <span class="input-group-addon">Tipo de Pago </span>
            <InputSelect class="form-control" @bind-Value="abon.Tipo_C_A" required>
                <option value="">Seleccione Una Opcion </option>
                <option value="Efectivo">Efectivo </option>
                <option value="Cheque">Cheque </option>
                <option value="Deposito">Deposito </option>
            </InputSelect>
        </div>
        <div class="input-group mb-3">
            <input type="text" class="form-control" id="boleta" @bind="abon.No_Boleta" aria-describedby="inputGroup-sizing-default" placeholder="No de Boleta" maxlength="15">
        </div>
        <div class="input-group mb-3">
            <span class="input-group-addon">Cantidad de Abono </span>
            <input type="number" class="form-control" id="abono" @bind="abon.Cantidad_cargo_Abono" aria-describedby="inputGroup-sizing-default" placeholder="Cantidad a Abonar" max="@de" required>
        </div>



        <div style="text-align: center; margin-left: auto; margin-right: auto;  padding-top: 25px;">

            @if (Ids == 0)
            {
                <button type="submit" class="btn" id="agregar" @onclick="SaveFilm">Abonar</button>
            }
            else
            {
                <button type="submit" class="btn" id="editar" @onclick="SaveFilm">Editar Abono</button>
            }



            <button type="button" class="btn-dan" value="Cancel" @onclick="CancelFilm">Cancelar</button>
        </div>
    </EditForm>




</div>

@code {

    [Parameter]
    public long id { get; set; }
    [Parameter]
    public float de { get; set; }
    [Parameter]
    public int Ids { get; set; }
    private IEnumerable<Pedidopagar> PPS;

    Abonos abon = new Abonos();
    protected void CancelFilm()
    {
        NavigationManager.NavigateTo("/Pagos");
    }
    protected async Task SaveFilm()
    {
        if (abon.Tipo_C_A == null)

        {
            await js.InvokeVoidAsync("alert", "Seleccione un Tipo de Pago!"); // Alert
        }
        else if (abon.Cantidad_cargo_Abono > Convert.ToDecimal(de))
        {
            await js.InvokeVoidAsync("alert", "La cantidad Excede la Deuda , ingrese una cantida igual o menor !"); // Alert

        }
        else if (abon.Cantidad_cargo_Abono  ==0 || abon.Cantidad_cargo_Abono<0)
        {
            await js.InvokeVoidAsync("alert", "La cantidad ingresada es cero o invalida  !"); // Alert

        }
        else
        {
            await Ab.Savepaga(abon);
            NavigationManager.NavigateTo("/Pagos");
        }

    }
    protected override async Task OnInitializedAsync()
    {


        if (Ids != 0)
        {

            abon = await Ab.GetDetails(Ids);
            PPS = await ppd.GetAllPedidopagar();

            foreach (var item in PPS)
            {
                if (item.pedido == abon.No_Factura)
                {
                    var x = Convert.ToDecimal(item.deuda) + abon.Cantidad_cargo_Abono;
                    de = (float)x;
                }
            }


        }
        else
        {
            abon.No_Factura = id;
            abon.Fecha_Pago = DateTime.Now;
        }


    }


}
